#
# resettle population of an entire planets to other owned planets in the targeted empire
# only available if there is enough room in the targeted empire
#
resettle = {
	execution_order = 1   #after rescue / kidnap # but before cede planet
	
	parameters = {
		planet = {
			type = planet
			filter = owned
		}
	}
	
	warscore_cost = {
		base = 10

		scaled_modifier = {
			scope = parameter:planet
			add = 0.8
			calc = pop_count
		}
		
		scaled_modifier = {
			scope = parameter:planet.owner
			div = 0.05
			calc = planets_in_country
		}
		
		modifier = {
			factor = 2
			hidden:parameter:planet = {
				is_capital = yes
			}
		}


		# Ruler Trait - Warlike
		modifier = {
			factor = 0.95
			custom_tooltip = {
				text = "war_demand_trait_warlike"
				exists = ruler
				ruler = { has_trait = trait_ruler_warlike }
			}
		}


		# Tech - Galactic Ambitions
		modifier = {
			factor = 0.95
			custom_tooltip = {
				text = "war_demand_tech_galactic_ambitions"
				has_technology = tech_galactic_ambitions
			}
		}

		# Tech - Manifest Destiny
		modifier = {
			factor = 0.8
			custom_tooltip = {
				text = "war_demand_tech_manifest_destiny"
				has_technology = tech_manifest_destiny
			}
		}
	}
	
	potential = {
		
		
		# # count free tiles
		# # this isn't actually a scope ... no idea where I should place it 
		# set_variable = {
			# which = free_tiles_empire
			# value = 0
		# }
		# parameter:planet.owner = { 
			# every_owned_planet = {
				# every_tile = {
					# limit = {
						# has_blocker = no
						# has_grown_pop = no
						# #has_growing_pop = no # :>
					# }
					# change_variable = {
						# which = free_tiles_empire
						# value = 1
					# }
				# }
			# }
		# }
		
		
		
		# # "force resettle" is the nicer option
		# custom_tooltip_fail = {
			# text="war_demand_resettle_no_room"
			# check_variable = {
				# which = "free_tiles_empire"
				# value > parameter:planet = { num_pops } ##this is never going to work
			# }	
		# }
		########## scrapped tile counting and replaced it with conditional replacement, e.g pops are only replaced if there is room for them somewhere
		
 		
		custom_tooltip_fail = {
			text = "war_demand_kidnap_belongs_to_opponent" #generic text
			parameter:planet = {
				owner = {
					OR = {
						AND = {
							exists = fromfrom
							from = {
								from = {
									is_war_participant = {
										who = prevprev
										side = prev
									}
								}
							}
						}
						AND = {
							NOT = { exists = fromfrom }
							would_join_war = {
								attacker = root
								defender = from
								side = from
							}
						}
						
					}
				}
			}
		}
		custom_tooltip_fail = {
			text = "war_demand_kidnap_no_vassals" #generic text
			subject_can_diplomacy = this
		}
	}
	
	possible = {
		always = yes
	}
	
	proposable = {
		hidden:parameter:planet = {    #cant cede and wipe planet, there would be no colony on it
			custom_tooltip_fail = {
				text = "war_demand_cede_or_liberate" #should be ok
				war_demand_counter = {
					type = ceded_or_liberated
					value < 1
				}
			}
		}	
	}
	 
	demandable = {  #updated to 1.1
		custom_tooltip_fail = {
			text = "war_demand_cede_planet_not_under_our_control" #generic text
			parameter:planet = {
				controller = {
					OR = {
						is_country = parameter:planet.owner
						fromfrom = {
							is_war_participant = {
								who = prev
								side = from
							}
						}
					}
				}
			}
		}
	}
	
	effect = {

		
		parameter:planet = {		
			add_threat = {
				who = ROOT #don't fuck your allies with this, root !
				amount = 3# scales to pops
			}		
			
			every_owned_pop = {  #this is actually also a planet scope
				if = {
					# limit = { 
						# root = {
							# any_war_defender = {
								# any_owned_planet = {
									# free_pop_tiles > 0
									# NOT = { is_planet = parameter:planet }
								# }
							# }
						# }
					# }
					limit = {
						any_country = {
							#exists = fromfrom #how else would this effect be entered ?
							from = {
								from = {
									is_war_participant = {
										who = prevprev
										side = prev
									}
								}
							}
							any_owned_planet = {
								free_pop_tiles > 0
								NOT = { is_planet = parameter:planet }
							}
						}
					}
					
					
					species = { save_event_target_as = expelled_species } # 
					
					random_country = {
						limit = {
							from = {
								from = {
									is_war_participant = {
										who = prevprev
										side = prev
									}
								}
							}
						}
						random_owned_planet = {
							limit = {
								free_pop_tiles > 0
								NOT = { is_planet = parameter:planet } 									
							}
							create_pop = {
								species = event_target:expelled_species
							}
						}
					}
						# random_country = {			
							# limit = {
								# root = {
									# any_war_defender = { 
										# is_country = prevprev
									# }
								# }
							# }
							# random_owned_planet = {
								# limit = {
									# free_pop_tiles > 0
									# NOT = { is_planet = parameter:planet } 									
								# }
								# create_pop = {
									# species = event_target:expelled_species
								# }
							# }
						# }
					
					
					last_created_pop = {
						
						add_modifier = { #
							modifier = pop_expelled
								days = 720  # 2 years, just for RP, should not be the reason for enemy failcascade
								clear_on_owner_change = yes
						}
						
						fn_novelwardemand_setethic = yes
					}
				
					kill_pop = yes	
				}		
						
					
				
			}
			
			
		}
	}
	
	
#derp
	
	
	

	counters = { 		#can't cede or liberate empty planet
		ceded_or_liberated = {
			context = parameter:planet
			value = {
				base = 1
			}			
		}
	}
	
	ai_weight = {
		base = 15
		
		modifier = {
			factor = 1.5
			this = { has_ai_personality = hive_mind } 
		}
		
		modifier = {
			factor = 1.25
			this = { has_ai_personality_behaviour = opportunist} 
		}
		modifier = {
			factor = 1.25
			this = { has_ai_personality = xenophobic_isolationists} 
			parameter:planet = {
				owner = {
					is_neighbor_of = root
				}
			}
			
		}
		scaled_modifier = {
			scope = parameter:planet
			div = 2
			calc = planet_distance_empire
		}

		modifier = { 
			factor = 0
			is_country_type = fallen_empire
		}

	}
	
}




